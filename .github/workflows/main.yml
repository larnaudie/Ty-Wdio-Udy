name: WDIO-CI
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
jobs:
  build:
    runs-on: ubuntu-latest
        permissions:
      contents: write
    env:
      RUNNER: ${{secrets.RUNNER}}
      LOG_LEVEL: ${{secrets.LOG_LEVEL}}
      TEST_NOP_ADMIN_USERNAME: ${{secrets.TEST_NOP_ADMIN_USERNAME}}
      TEST_NOP_ADMIN_PASSWORD: ${{secrets.TEST_NOP_ADMIN_PASSWORD}}
      TEST_STD_USERNAME: ${{secrets.TEST_STD_USERNAME}}
      TEST_STD_PASSWORD: ${{secrets.TEST_STD_PASSWORD}}
    steps:
      # Asegurarse de que WDIO tiene permisos de ejecución
      - name: Set executable permissions for wdio
        run: chmod +x ./node_modules/.bin/wdio

      - name: Install Chromium
        run: sudo apt-get install chromium-browser

      - uses: actions/checkout@v3

      # Instalar Geckodriver - especificamos una versión fija
      - name: Install Geckodriver
        run: |
          GECKODRIVER_VERSION="v0.33.0"
          wget https://github.com/mozilla/geckodriver/releases/download/$GECKODRIVER_VERSION/geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz
          tar -xzf geckodriver-$GECKODRIVER_VERSION-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          geckodriver --version
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 20.x

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      # Correra las features con @smoke respetando los scripts del package.json
      - name: Corriendo test smoke
        run: npm run test:smoke
#  name: WDIO-CI
# # Controla donde va a trabajar el workflow
# on:
#   # lanza el workflow cuando hay un push o pull pero en las branches que estan aca
#   push:
#     branches: [main]
#   pull_request:
#     branches:
#       [main]
#       # Te permite ejecutarlo manualmente desde Github Actions
#   workflow_dispatch:
# jobs:
#   # El job contiene solo 1 job que se llama build
#   build:
#     # Decidimos en que maquina virutal va a operar
#     runs-on: ubuntu-latest
#     permissions:
#       contents: write
#     env:
#       RUNNER: ${{secrets.RUNNER}}
#       LOG_LEVEL: ${{secrets.LOG_LEVEL}}
#       TEST_NOP_ADMIN_USERNAME: ${{secrets.TEST_NOP_ADMIN_USERNAME}}
#       TEST_NOP_ADMIN_PASSWORD: ${{secrets.TEST_NOP_ADMIN_PASSWORD}}
#       TEST_STD_USERNAME: ${{secrets.TEST_STD_USERNAME}}
#       TEST_STD_PASSWORD: ${{secrets.TEST_STD_PASSWORD}}

#       # le indicamos los pasos
#     steps:
#       # Checkout del repositorio
#       - name: Checkout code
#         uses: actions/checkout@v3

#       # Instalar Chromedriver
#       # - name: Install Chromedriver
#       #   run: |
#       #     CHROMEDRIVER_VERSION=$(curl -sS chromedriver.storage.googleapis.com/LATEST_RELEASE)
#       #     wget https://chromedriver.storage.googleapis.com/$CHROMEDRIVER_VERSION/chromedriver_linux64.zip
#       #     unzip chromedriver_linux64.zip
#       #     sudo mv chromedriver /usr/local/bin/
#       #     chmod +x /usr/local/bin/chromedriver
#       #     chromedriver --version
#     # Install chromium
#       - name: Install Chromium
#         uses: browser-actions/setup-chrome@v1
#         with:
#           chrome-version: 120
#           install-chromedriver: true

#       # Nombramos otro step instalando node
#       - name: Use Node.js
#         uses: actions/setup-node@v4
#         with:
#           node-version: 20.x

#       # Nombramos otro step para instalar dependencias
#       - name: Install dependencies
#         run:
#           npm install --legacy-peer-deps

#       # Asegurarse de que WDIO tiene permisos de ejecución
#       - name: Set executable permissions for wdio
#         run: chmod +x ./node_modules/.bin/wdio

#       # Correra las features con @smoke respetando los scripts del package.json
#       - name: Corriendo test smoke
#         run: npm run test:smoke
